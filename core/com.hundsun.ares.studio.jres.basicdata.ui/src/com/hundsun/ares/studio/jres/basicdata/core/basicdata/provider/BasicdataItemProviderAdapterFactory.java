/**
 */
package com.hundsun.ares.studio.jres.basicdata.core.basicdata.provider;

import com.hundsun.ares.studio.jres.basicdata.core.basicdata.util.BasicdataAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BasicdataItemProviderAdapterFactory extends BasicdataAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BasicdataItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.EpacakgeDefineList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EpacakgeDefineListItemProvider epacakgeDefineListItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.EpacakgeDefineList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEpacakgeDefineListAdapter() {
		if (epacakgeDefineListItemProvider == null) {
			epacakgeDefineListItemProvider = new EpacakgeDefineListItemProvider(this);
		}

		return epacakgeDefineListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.SingleTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleTableItemProvider singleTableItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.SingleTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleTableAdapter() {
		if (singleTableItemProvider == null) {
			singleTableItemProvider = new SingleTableItemProvider(this);
		}

		return singleTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.MasterSlaveTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MasterSlaveTableItemProvider masterSlaveTableItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.MasterSlaveTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMasterSlaveTableAdapter() {
		if (masterSlaveTableItemProvider == null) {
			masterSlaveTableItemProvider = new MasterSlaveTableItemProvider(this);
		}

		return masterSlaveTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.MasterSlaveLinkTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MasterSlaveLinkTableItemProvider masterSlaveLinkTableItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.MasterSlaveLinkTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMasterSlaveLinkTableAdapter() {
		if (masterSlaveLinkTableItemProvider == null) {
			masterSlaveLinkTableItemProvider = new MasterSlaveLinkTableItemProvider(this);
		}

		return masterSlaveLinkTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.BasicDataBaseModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicDataBaseModelItemProvider basicDataBaseModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.BasicDataBaseModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicDataBaseModelAdapter() {
		if (basicDataBaseModelItemProvider == null) {
			basicDataBaseModelItemProvider = new BasicDataBaseModelItemProvider(this);
		}

		return basicDataBaseModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.StandardFieldPackageDefine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardFieldPackageDefineItemProvider standardFieldPackageDefineItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.StandardFieldPackageDefine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardFieldPackageDefineAdapter() {
		if (standardFieldPackageDefineItemProvider == null) {
			standardFieldPackageDefineItemProvider = new StandardFieldPackageDefineItemProvider(this);
		}

		return standardFieldPackageDefineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.StandardFieldModelAndData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardFieldModelAndDataItemProvider standardFieldModelAndDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.StandardFieldModelAndData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardFieldModelAndDataAdapter() {
		if (standardFieldModelAndDataItemProvider == null) {
			standardFieldModelAndDataItemProvider = new StandardFieldModelAndDataItemProvider(this);
		}

		return standardFieldModelAndDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.StandardFieldColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardFieldColumnItemProvider standardFieldColumnItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.StandardFieldColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardFieldColumnAdapter() {
		if (standardFieldColumnItemProvider == null) {
			standardFieldColumnItemProvider = new StandardFieldColumnItemProvider(this);
		}

		return standardFieldColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.BasicDataField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicDataFieldItemProvider basicDataFieldItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.BasicDataField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicDataFieldAdapter() {
		if (basicDataFieldItemProvider == null) {
			basicDataFieldItemProvider = new BasicDataFieldItemProvider(this);
		}

		return basicDataFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.BasicdataItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicdataItemItemProvider basicdataItemItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.jres.basicdata.core.basicdata.BasicdataItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicdataItemAdapter() {
		if (basicdataItemItemProvider == null) {
			basicdataItemItemProvider = new BasicdataItemItemProvider(this);
		}

		return basicdataItemItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (epacakgeDefineListItemProvider != null) epacakgeDefineListItemProvider.dispose();
		if (singleTableItemProvider != null) singleTableItemProvider.dispose();
		if (masterSlaveTableItemProvider != null) masterSlaveTableItemProvider.dispose();
		if (masterSlaveLinkTableItemProvider != null) masterSlaveLinkTableItemProvider.dispose();
		if (basicDataBaseModelItemProvider != null) basicDataBaseModelItemProvider.dispose();
		if (standardFieldPackageDefineItemProvider != null) standardFieldPackageDefineItemProvider.dispose();
		if (standardFieldModelAndDataItemProvider != null) standardFieldModelAndDataItemProvider.dispose();
		if (standardFieldColumnItemProvider != null) standardFieldColumnItemProvider.dispose();
		if (basicDataFieldItemProvider != null) basicDataFieldItemProvider.dispose();
		if (basicdataItemItemProvider != null) basicdataItemItemProvider.dispose();
	}

}
