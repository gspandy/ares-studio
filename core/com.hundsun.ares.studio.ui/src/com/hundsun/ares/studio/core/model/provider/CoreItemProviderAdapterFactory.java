/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.hundsun.ares.studio.core.model.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.hundsun.ares.studio.core.model.util.CoreAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CoreItemProviderAdapterFactory extends CoreAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CoreItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.core.model.JRESResourceInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JRESResourceInfoItemProvider jresResourceInfoItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.core.model.JRESResourceInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJRESResourceInfoAdapter() {
		if (jresResourceInfoItemProvider == null) {
			jresResourceInfoItemProvider = new JRESResourceInfoItemProvider(this);
		}

		return jresResourceInfoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.core.model.BasicResourceInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicResourceInfoItemProvider basicResourceInfoItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.core.model.BasicResourceInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicResourceInfoAdapter() {
		if (basicResourceInfoItemProvider == null) {
			basicResourceInfoItemProvider = new BasicResourceInfoItemProvider(this);
		}

		return basicResourceInfoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.core.model.RevisionHistory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RevisionHistoryItemProvider revisionHistoryItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.core.model.RevisionHistory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRevisionHistoryAdapter() {
		if (revisionHistoryItemProvider == null) {
			revisionHistoryItemProvider = new RevisionHistoryItemProvider(this);
		}

		return revisionHistoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EStringToEObjectMapEntryItemProvider eStringToEObjectMapEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEStringToEObjectMapEntryAdapter() {
		if (eStringToEObjectMapEntryItemProvider == null) {
			eStringToEObjectMapEntryItemProvider = new EStringToEObjectMapEntryItemProvider(this);
		}

		return eStringToEObjectMapEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.core.model.ExtensibleModelConfigProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtensibleModelConfigPropertyItemProvider extensibleModelConfigPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.core.model.ExtensibleModelConfigProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtensibleModelConfigPropertyAdapter() {
		if (extensibleModelConfigPropertyItemProvider == null) {
			extensibleModelConfigPropertyItemProvider = new ExtensibleModelConfigPropertyItemProvider(this);
		}

		return extensibleModelConfigPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.core.model.ExtensibleModelAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtensibleModelAttributeItemProvider extensibleModelAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.core.model.ExtensibleModelAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtensibleModelAttributeAdapter() {
		if (extensibleModelAttributeItemProvider == null) {
			extensibleModelAttributeItemProvider = new ExtensibleModelAttributeItemProvider(this);
		}

		return extensibleModelAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.core.model.UserExtensibleProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserExtensiblePropertyItemProvider userExtensiblePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.core.model.UserExtensibleProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserExtensiblePropertyAdapter() {
		if (userExtensiblePropertyItemProvider == null) {
			userExtensiblePropertyItemProvider = new UserExtensiblePropertyItemProvider(this);
		}

		return userExtensiblePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.core.model.ModuleExtensibleModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleExtensibleModelItemProvider moduleExtensibleModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.core.model.ModuleExtensibleModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleExtensibleModelAdapter() {
		if (moduleExtensibleModelItemProvider == null) {
			moduleExtensibleModelItemProvider = new ModuleExtensibleModelItemProvider(this);
		}

		return moduleExtensibleModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.core.model.ProjectExtensibleModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectExtensibleModelItemProvider projectExtensibleModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.core.model.ProjectExtensibleModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectExtensibleModelAdapter() {
		if (projectExtensibleModelItemProvider == null) {
			projectExtensibleModelItemProvider = new ProjectExtensibleModelItemProvider(this);
		}

		return projectExtensibleModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.core.model.ProjectRevisionHistoryProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectRevisionHistoryPropertyItemProvider projectRevisionHistoryPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.core.model.ProjectRevisionHistoryProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectRevisionHistoryPropertyAdapter() {
		if (projectRevisionHistoryPropertyItemProvider == null) {
			projectRevisionHistoryPropertyItemProvider = new ProjectRevisionHistoryPropertyItemProvider(this);
		}

		return projectRevisionHistoryPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.hundsun.ares.studio.core.model.ModuleRevisionHistoryList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleRevisionHistoryListItemProvider moduleRevisionHistoryListItemProvider;

	/**
	 * This creates an adapter for a {@link com.hundsun.ares.studio.core.model.ModuleRevisionHistoryList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleRevisionHistoryListAdapter() {
		if (moduleRevisionHistoryListItemProvider == null) {
			moduleRevisionHistoryListItemProvider = new ModuleRevisionHistoryListItemProvider(this);
		}

		return moduleRevisionHistoryListItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (jresResourceInfoItemProvider != null) jresResourceInfoItemProvider.dispose();
		if (basicResourceInfoItemProvider != null) basicResourceInfoItemProvider.dispose();
		if (revisionHistoryItemProvider != null) revisionHistoryItemProvider.dispose();
		if (eStringToEObjectMapEntryItemProvider != null) eStringToEObjectMapEntryItemProvider.dispose();
		if (extensibleModelConfigPropertyItemProvider != null) extensibleModelConfigPropertyItemProvider.dispose();
		if (extensibleModelAttributeItemProvider != null) extensibleModelAttributeItemProvider.dispose();
		if (userExtensiblePropertyItemProvider != null) userExtensiblePropertyItemProvider.dispose();
		if (moduleExtensibleModelItemProvider != null) moduleExtensibleModelItemProvider.dispose();
		if (projectExtensibleModelItemProvider != null) projectExtensibleModelItemProvider.dispose();
		if (projectRevisionHistoryPropertyItemProvider != null) projectRevisionHistoryPropertyItemProvider.dispose();
		if (moduleRevisionHistoryListItemProvider != null) moduleRevisionHistoryListItemProvider.dispose();
	}

}
